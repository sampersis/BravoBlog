@model IEnumerable<BlogBravo.Data.ApplicationUser>
@using BlogBravo.Data
@using Microsoft.AspNetCore.Identity

@inject UserManager<ApplicationUser> UserManager
@inject SignInManager<ApplicationUser> SignInManager
@inject RoleManager<IdentityRole> RoleManager

@{
    Layout = null;
}

<style>
    * {
        font-family: 'Tw Cen MT';
    }
</style>


<div id="create-user" class="bg-light border border-dark rounded col-md-6 my-2 py-3 px-5" hidden>
    <form id="registration-form" method="post">
        <div class="form-group">
            <label class="btn btn-sm btn-dark py-0 ml-1" style="font-size: 0.9rem; border-radius: 25px;">First Name</label>
            <input id="first-name" name="first-name" class="form-control" maxlength="50" style="border-radius:25px;" required />
        </div>
        <div class="form-group">
            <label class="btn btn-sm btn-dark py-0 ml-1" style="font-size: 0.9rem; border-radius: 25px;">Last Name</label>
            <input id="last-name" name="last-name" class="form-control" maxlength="50" style="border-radius:25px;" required />
        </div>
        <div class="form-group">
            <label class="btn btn-sm btn-dark py-0 ml-1" style="font-size: 0.9rem; border-radius: 25px;">Email</label>
            <input id="email" type="email" name="email" class="form-control" style="border-radius:25px;" required />
            <span id="check-email-format"></span>
        </div>
        <div class="form-group">
            <label class="btn btn-sm btn-dark py-0 ml-1" style="font-size: 0.9rem; border-radius: 25px;">Password</label>
            <input id="password" type="password" name="password" class="form-control" style="border-radius:25px;" required />
        </div>
        <div class="form-group">
            <label class="btn btn-sm btn-dark py-0 ml-1" style="font-size: 0.9rem; border-radius: 25px;">Confirm Password</label>
            <input id="retype-password" type="password" name="confirm-password" class="form-control" style="border-radius:25px;" required />
            <span id="password-match"></span>
        </div>
        <div class="form-group row mb-5 ml-1">
            <label class="btn btn-sm btn-dark mr-5 py-0" style="font-size: 0.9rem; border-radius: 25px;">Select a Role</label>
            <select id="role-selector" class="rounded" style="height:fit-content;" onchange="roleSelection(this.selectedIndex);">
                <option selected="selected">Select a Role</option>
                @foreach (var role in ViewBag.Roles)
                {
                    <option>@role.Name</option>
                }
            </select>
            <input id="role" name="role" value="" hidden required/>
        </div>
        <div class="form-group row mb-2">
            <div>
                <button id="register-user" type="submit" class="btn btn-dark py-0 mb-3 mr-5" style="border-radius: 25px;" asp-controller="Admin" asp-action="CreateUser" disabled>Register</button>
            </div>
            <div>
                <a id="cancel" href="#" class="btn btn-dark py-0 float-right" style="border-radius: 25px;">Cancel</a>
            </div>
        </div>
    </form>
</div>
<div>
    <button id="create-a-new-user" class="btn btn-secondary mb-3">Create A New User</button>
</div>

<table class="table table-striped">
    <thead class="bg-secondary text-white">
        <tr>
            <th>
                @Html.DisplayNameFor(model => model.Id)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.UserName)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.FirstName)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.LastName)
            </th>
            <th>
                Role
            </th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in Model)
        {
            string userRole = "Undefined";
            IList<string> UserRole = await SignInManager.UserManager.GetRolesAsync(item);
            if (UserRole.Count > 0)
            {
                userRole = UserRole.ElementAt(0);
            }

            <tr>
                <td>
                    @Html.DisplayFor(modelItem => item.Id)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.UserName)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.FirstName)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.LastName)
                </td>
                <td>
                    @userRole
                </td>
                <td>
                    <div class="btn-group">
                        <a asp-action="EditUser" asp-route-id="@item.Id"><i class=" mr-2 fas fa-edit"></i></a>
                        <a asp-action="ViewUser" asp-route-id="@item.Id" style="pointer-events: none"><i class="mr-2 text-success fas fa-eye"></i></a>
                        <a asp-action="DeleteUser" asp-route-id="@item.Id"><i class="text-danger fas fa-trash-alt"></i></a>
                    </div>
                </td>
            </tr>
        }
    </tbody>
</table>

<script>
    var emailHaveCorrectFormat = false;
    $("#create-a-new-user").click(function () {
        $("#create-user input").val("");
        $("#create-user").prop('hidden', false);
        $("#create-a-new-user").hide();
    });

    $("#cancel").click(function () {
        $("#create-user input").val("");
        $("#create-user").prop('hidden', true);
        $("#create-a-new-user").show();
    });

    $("#first-name").keyup(function () {
        var letters = /^[A-Za-zÅÄÖåäöÜü]{1,}$/;

        //get the last charcter typed
        var firstname = $("#first-name").val();
        lastCharTyped = firstname[firstname.length - 1]; 

        //check whether it is alphabets
        if (firstname.length > 0) {
            if (!letters.test(lastCharTyped)) {
                $("#first-name").val(firstname.slice(0, -1));
            }
            else {
                $("#first-name").val(firstname.charAt(0).toUpperCase() + firstname.slice(1).toLowerCase());
            }
        }
        else {
            $("#register-user").prop('disabled', true);
        }
    });


    $("#last-name").keyup(function () {
        var letters = /^[A-Za-zÅÄÖåäöÜü]{1,}$/;

        //get the last charcter typed
        var lastname = $("#last-name").val();
        lastCharTyped = lastname[lastname.length - 1];

        //check whether it is alphabets

        if (lastname.length > 0) {
            if (!letters.test(lastCharTyped)) {
                $("#last-name").val(lastname.slice(0, -1));
            }
            else {
                $("#last-name").val(lastname.charAt(0).toUpperCase() + lastname.slice(1).toLowerCase());
            }
        }
        else {
            $("#register-user").prop('disabled', true);
        }
    });

    $("#email").keyup(function () {
        var emailRE = /(^[A-Za-z0-9_-]+([\.]{0,1})[A-Za-z0-9_-]+){1}([@@]{1})([A-Za-z0-9]{1,}[\.]{1}){1,3}([A-Za-z]{2,63}){1}$/;
        var email = $("#email").val();
        if (email.length > 0) {
            if (emailRE.test(email)) {
                $("#check-email-format").css("color", "green");
                $("#check-email-format").text("Email format correct!");
                emailHaveCorrectFormat = true;
            }
            else {
                $("#check-email-format").css("color", "red");
                $("#check-email-format").text("Email format incorrect!");
                emailHaveCorrectFormat = false;
            }
        }
        else {
            $("#check-email-format").text("");
            $("#register-user").prop('disabled', true);
        }
    });

    $("#password").keyup(function () {
        if ($("#password").val() == 0) {
            $("#register-user").prop('disabled', true);
        }

    });

    $("#retype-password").keyup(function () {
            password = $("#password").val();
            retypePassword = $("#retype-password").val();

        if (password.length > 0) {
            if (password != retypePassword) {
                $("#password-match").text("Passwords do not match!");
                $("#password-match").css("color", "red");
            }
            else {
                $("#password-match").css("color", "green");
                $("#password-match").text("Passwords match!");
            }
        }
        else {
            $("#password-match").css("color", "red");
            $("#password-match").text("Password is empty!");
            $("#register-user").prop('disabled', true);
        }
    });

    $("#registration-form").change(function () {
        console.log("REGISTRATION FORM CHANGED!")
        var firstname = $("#first-name").val();
        var lastname = $("#last-name").val();
        var password = $("#password").val();
        var retypePassword = $("#retype-password").val();
        var email = $("#email").val();
        var role = $("#role").val();

        if (firstname.length && lastname.length && password.length && retypePassword.length && email.length && role.length && (password == retypePassword) && Boolean(emailHaveCorrectFormat)) {
            $("#register-user").prop('disabled', false);
        }
        else {
            $("#register-user").prop('disabled', true);
        }
    });

    function roleSelection(option) {
        var selectedOption = parseInt(option);
        if (selectedOption > 0) {
            var role = $("#role-selector option:selected").val();
            $("#role").val(role);
        }
        else {
            $('#role').val("");
        }
    }
</script>